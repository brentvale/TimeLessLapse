{
  "_args": [
    [
      {
        "raw": "react-konva",
        "scope": null,
        "escapedName": "react-konva",
        "name": "react-konva",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/brenttaylorvale/Desktop/TimeLessLapse"
    ]
  ],
  "_from": "react-konva@latest",
  "_id": "react-konva@1.1.3",
  "_inCache": true,
  "_location": "/react-konva",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-konva-1.1.3.tgz_1492136051852_0.38249446963891387"
  },
  "_npmUser": {
    "name": "lavrton",
    "email": "lavrton@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-konva",
    "scope": null,
    "escapedName": "react-konva",
    "name": "react-konva",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-konva/-/react-konva-1.1.3.tgz",
  "_shasum": "5d256e196909d193ed59951bc0588a378c43a57f",
  "_shrinkwrap": null,
  "_spec": "react-konva",
  "_where": "/Users/brenttaylorvale/Desktop/TimeLessLapse",
  "bugs": {
    "url": "https://github.com/lavrton/react-konva/issues"
  },
  "dependencies": {
    "create-react-class": "^15.5.2",
    "fbjs": "^0.8.12",
    "object-assign": "^4.1.1",
    "prop-types": "^15.5.8"
  },
  "description": "React binding to canvas element via Konva framework",
  "devDependencies": {
    "babel-core": "^6.24.1",
    "babel-loader": "^6.4.1",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "babel-register": "^6.24.1",
    "chai": "^3.5.0",
    "enzyme": "^2.8.0",
    "jsdom": "^9.12.0",
    "konva": "^1.5.0",
    "mocha": "^3.2.0",
    "mocha-phantomjs": "^4.1.0",
    "react": "~15.5.1",
    "react-addons-test-utils": "^15.5.1",
    "react-dom": "~15.5.0",
    "react-test-renderer": "^15.5.4",
    "sinon": "^2.1.0",
    "webpack": "^2.3.3",
    "webpack-dev-server": "^2.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "5d256e196909d193ed59951bc0588a378c43a57f",
    "tarball": "https://registry.npmjs.org/react-konva/-/react-konva-1.1.3.tgz"
  },
  "files": [
    "README.md",
    "src/react-konva.js",
    "react-konva.d.ts"
  ],
  "gitHead": "c1a423a2ee257095c5b5d6da8d1b6bd4416a2562",
  "homepage": "https://github.com/lavrton/react-konva#readme",
  "keywords": [
    "react",
    "canvas",
    "jsx",
    "konva"
  ],
  "licenses": "BSD-3-Clause",
  "main": "./src/react-konva.js",
  "maintainers": [
    {
      "name": "lavrton",
      "email": "lavrton@gmail.com"
    }
  ],
  "name": "react-konva",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "~15.5.1",
    "konva": "^1.5.0",
    "react-dom": "~15.5.0"
  },
  "readme": "# React Konva\n\n[![Build Status](https://travis-ci.org/lavrton/react-konva.svg?branch=master)](https://travis-ci.org/lavrton/react-konva)\n\n![ReactKonva Logo](https://cloud.githubusercontent.com/assets/1443320/12193428/3bda2fcc-b623-11e5-8319-b1ccfc95eaec.png)\n\nReact Konva is a JavaScript library for drawing complex canvas graphics using [React](http://facebook.github.io/react/).\n\nIt provides declarative and reactive bindings to the [Konva Framework](http://konvajs.github.io/).\n\n# [DEMO](http://jsbin.com/camene/edit?js,output)\n\nAn attempt to make [React](http://facebook.github.io/react/) work with the HTML5 canvas library. The goal is to have\nsimilar declarative markup as normal React and to have similar data-flow model.\n\nCurrently you can use all `Konva` components as React components and all `Konva`\nevents are supported on them in same way as normal browser events are supported.\n\nYou can even inspect the components in React dev tools.\n\n## Installation\n\n```bash\nnpm install react konva react-konva --save\n```\n\n## Example\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Layer, Rect, Stage, Group} from 'react-konva';\n\n\n\nclass MyRect extends React.Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        color: 'green'\n      };\n      this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick() {\n      this.setState({\n        color: Konva.Util.getRandomColor()\n      });\n    }\n    render() {\n        return (\n            <Rect\n                x={10} y={10} width={50} height={50}\n                fill={this.state.color}\n                shadowBlur={10}\n                onClick={this.handleClick}\n            />\n        );\n    }\n}\n\nfunction App() {\n    // Stage - is a div wrapper\n    // Layer - is a <canvas> element on the page\n    // so you can use several canvases. It may help you to improve performance a lot.\n    return (\n      <Stage width={700} height={700}>\n        <Layer>\n            <MyRect/>\n        </Layer>\n      </Stage>\n    );\n}\n\n\nReactDOM.render(<App/>, document.getElementById('container'));\n```\n\n\nAll `react-konva` components correspond to `Konva` components of the same\nname. All the parameters available for `Konva` objects are valid props for\ncorresponding `react-konva` components, unless otherwise noted.\n\nCore shapes are: Rect, Circle, Ellipse, Line, Image, Text, TextPath, Star, Label, SVG Path, RegularPolygon.\nAlso you can create custom shape.\n\nTo get more info about `Konva` you can read [Konva Overview](http://konvajs.github.io/docs/overview.html).\n\n\n\n\n## Comparisons\n\n### react-konva vs react-canvas\n\n[react-canvas](https://github.com/Flipboard/react-canvas) is a completely different react plugin. It allows you to draw DOM-like objects (images, texts) on canvas element in very performant way. It is NOT about drawing graphics, but react-konva is exactly for drawing complex graphics on `<canvas>` element from React.\n\n### react-konva vs react-art\n\n[react-art](https://github.com/reactjs/react-art) allows you to draw graphics on a page. It also supports SVG for output. But it has no support of events of shapes.\n\n### react-konva vs vanilla canvas\n\nPerformance is one of the main buzz word in react hype.\n\nI made this plugin not for performance reasons. Using vanilla <canvas> should be more performant because while using react-konva you have Konva framework on top of <canvas> and React on top of Konva. But I made this plugin to fight with application complexity. Konva helps here a lot (especially when you need events for objects on canvas, like “click” on shape, it is really hard to do with vanilla canvas). But React helps here much more as it provides very good structure for your codebase and data flow.\n\n\n## Documentation and Examples\n\n**Note: you can find a lot of demos and examples of using Konva there: [http://konvajs.github.io/](http://konvajs.github.io/)**\n\n\n### Getting reference to Konva objects\n\nTo get reference of `Konva` instance of a node you can use `ref` property.\n\n```javascript\nclass MyShape extends React.Component {\n    componentDidMount() {\n        // log Konva.Circle instance\n        console.log(this.refs.circle);\n    }\n    render() {\n        return (\n            <Circle ref=\"circle\" radius={50} fill=\"black\"/>\n        );\n    }\n}\n```\n\nThat will work for all nodes except `Stage`. To get `Stage` instance you have to use:\n\n```javascript\nclass App extends React.Component {\n    componentDidMount() {\n        // log stage react wrapper\n        console.log(this.refs.stage);\n        // log Konva.Stage instance\n        console.log(this.refs.stage.getStage());\n    }\n    render() {\n        return (\n            <Stage ref=\"stage\" width=\"300\" height=\"300\"/>\n        );\n    }\n}\n```\n\n### Animations\n\nFor complex animation I recommend to use React methods. Somethings like:\n* [https://github.com/chenglou/react-motion](https://github.com/chenglou/react-motion)\n* [https://github.com/chenglou/react-tween-state](https://github.com/chenglou/react-tween-state)\n\nBut for simple cases you can use `Konva` methods:\n\n[http://jsbin.com/puroji/2/edit?js,output](http://jsbin.com/puroji/2/edit?js,output)\n```javascript\nclass MyRect extends React.Component {\n    changeSize() {\n        const rect = this.refs.rect;\n\n        // to() is a method of `Konva.Node` instances\n        rect.to({\n            scaleX: Math.random() + 0.8,\n            scaleY: Math.random() + 0.8,\n            duration: 0.2\n        });\n    }\n    render() {\n        return (\n            <Group>\n                <Rect\n                    ref=\"rect\"\n                    width=\"50\"\n                    height=\"50\"\n                    fill=\"green\"\n                    draggable=\"true\"\n                    onDragEnd={this.changeSize.bind(this)}\n                    onDragStart={this.changeSize.bind(this)}\n                />\n          </Group>\n        );\n    }\n}\n```\n\n### Using images\n\nFor images you need manually create native window.Image instance or `<canvas>` element\nand use it as `image` attribute of `ReactKonva.Image` component.\n\nDemo: http://jsbin.com/wedovemota/1/edit?js,output\n\n```JavaScript\nimport {Layer, Stage, Image} from 'react-konva';\n\n// try drag& drop rectangle\nclass MyImage extends React.Component {\n    state = {\n      image: null\n    }\n    componentDidMount() {\n      const image = new window.Image();\n      image.src = 'http://konvajs.github.io/assets/yoda.jpg';\n      image.onload = () => {\n        this.setState({\n          image: image\n        });\n      }\n    }\n\n    render() {\n        return (\n            <Image\n              image={this.state.image}\n            />\n        );\n    }\n}\n\nfunction App() {\n    return (\n      <Stage width={700} height={700}>\n        <Layer>\n            <MyImage/>\n        </Layer>\n      </Stage>\n    );\n}\n\n\nReactDOM.render(<App/>, document.getElementById('container'));\n```\n\n### Using filters\n\nTo apply filters you need to cache `Konva.Node` (`ref` of all `react-konva` components).\n\nDEMO: http://jsbin.com/ceyegucibe/1/edit?html,js,output\n\n```javascript\nclass MyRect extends React.Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        color: 'green'\n      };\n      this.handleClick = this.handleClick.bind(this);\n    }\n    componentDidMount() {\n      this.rect.cache();\n    }\n    handleClick() {\n      this.setState({\n        color: Konva.Util.getRandomColor()\n      }, () => {\n        // IMPORTANT\n        // recache on update\n        this.rect.cache();\n      });\n    }\n    render() {\n        return (\n            <Rect\n                filters={[Konva.Filters.Noise]}\n                noise={1}\n                x={10} y={10} width={50} height={50}\n                fill={this.state.color}\n                shadowBlur={10}\n                ref={(node) => { this.rect = node;}}\n                onClick={this.handleClick}\n            />\n        );\n    }\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/lavrton/react-konva.git"
  },
  "scripts": {
    "build": "webpack --progress --profile --colors",
    "test": "npm run test:compile && npm run test:run && npm run test:clean",
    "test:clean": "rm ./test/tests.bundle.js",
    "test:compile": "webpack --config webpack.test.config.js --progress --profile --colors",
    "test:run": "mocha-phantomjs test/index.html",
    "test:watch": "webpack-dev-server --config webpack.test.config.js --progress --profile --colors"
  },
  "typings": "react-konva.d.ts",
  "version": "1.1.3"
}
