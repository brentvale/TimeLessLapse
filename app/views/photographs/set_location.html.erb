<p id="hubConfirmation"></p>

<div id="formActions">
	<div id="formSubmission" class="btn btn-primary btn-lg">Yes</div>
</div>

<div id="map" data-hub-locations="<%= @hubs %>" data-photo-one-url="<%= image_path('camera_image_32x32.png')%>" data-photo-two-url="<%= image_path('camera_image_32x32_red.png')%>" data-photo-coordinates="<%= @photograph_coords %>" data-photo-id="<%= @photograph.id %>"></div>

<script>
	var MIN_DISTANCE;
	var NEAREST_CAMERA_SPOT_NAME;
	var SPOT_ID;
	
	var map;
	
	var hubs = $("#map").data("hub-locations");
	
  function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 37.4246098, lng: -121.7552619},
      zoom: 15,
			mapTypeId: 'terrain'
    });
		
		var outerCoords = [
		    {lat: 37.417933, lng: -121.760640},
		    {lat: 37.417958, lng: -121.742680}, 
		    {lat: 37.425120, lng: -121.742616}, 
		    {lat: 37.425090, lng: -121.751613},
				{lat: 37.432468, lng: -121.751557},
				{lat: 37.432501, lng: -121.769736},
				{lat: 37.425076, lng: -121.769725},
				{lat: 37.425054, lng: -121.760651}
		];
		
		var ranch = new google.maps.Polygon({ paths: outerCoords,
																					strokeColor: '#FF0000',
						      												strokeOpacity: 0.3,
						      												strokeWeight: 2,
						      												fillColor: '#FF0000',
						      												fillOpacity: 0.05
		});
		ranch.setMap(map);
		
		setMarkers(map);
  }
	
	// Data for the markers consisting of a name, a LatLng and a zIndex for the
  // order in which these markers should display on top of each other.
	
  function pictureSpotsFromHubs(){
		var pictureSpotsArray = []
		for(var i = 0; i< hubs.length; i ++){
			//push i + 1 as 4th argument which is xIndex
			var tempArray = hubs[i].split("***");
			tempArray.push(i+1);
			//convert strings to float for later math
			tempArray[1] = parseFloat(tempArray[1]);
			tempArray[2] = parseFloat(tempArray[2]);
			pictureSpotsArray.push(tempArray);
		}
	  return pictureSpotsArray;
  };
	
  function setMarkers(map) {
    // Adds markers to the map.

    // Marker sizes are expressed as a Size of X,Y where the origin of the image
    // (0,0) is located in the top left of the image.

    // Origins, anchor positions and coordinates of the marker increase in the X
    // direction to the right and in the Y direction down.
		var photoImageUrl = $('#map').data('photo-one-url');
		var photoImageUrlRed = $('#map').data('photo-two-url');
		
    var image = {
      url: photoImageUrl,
      // This marker is 32 pixels wide by 32 pixels high.
      size: new google.maps.Size(32, 32),
      // The origin for this image is (0, 0).
      origin: new google.maps.Point(0, 0),
      // The anchor for this image is the base of the flagpole at (0, 32).
      anchor: new google.maps.Point(0, 32)
    };
    var imageTwo = {
      url: photoImageUrlRed,
      // This marker is 32 pixels wide by 32 pixels high.
      size: new google.maps.Size(32, 32),
      // The origin for this image is (0, 0).
      origin: new google.maps.Point(0, 0),
      // The anchor for this image is the base of the flagpole at (0, 32).
      anchor: new google.maps.Point(0, 32)
    };
    // Shapes define the clickable region of the icon. The type defines an HTML
    // <area> element 'poly' which traces out a polygon as a series of X,Y points.
    // The final coordinate closes the poly by connecting to the first coordinate.
    var shape = {
      coords: [1, 1, 1, 20, 18, 20, 18, 1],
      type: 'poly'
    };
		var pictureSpots = pictureSpotsFromHubs();
		var returnedArray = findNearestCameraSpot(pictureSpots);
		
		NEAREST_CAMERA_SPOT_NAME = returnedArray[0]; 
		MIN_DISTANCE = returnedArray[1];
		SPOT_ID = returnedArray[2];

    for (var i = 0; i < pictureSpots.length; i++) {
			var spot = pictureSpots[i];
			
			if(NEAREST_CAMERA_SPOT_NAME === pictureSpots[i][0]){
	      var marker = new google.maps.Marker({
	        position: {lat: spot[1], lng: spot[2]},
	        map: map,
					//USE RED IMAGE FOR CLOSEST CAMERA SPOT
	        icon: imageTwo,
	        shape: shape,
	        title: spot[0],
	        zIndex: spot[4]
	      });
			} else {
	      var marker = new google.maps.Marker({
	        position: {lat: spot[1], lng: spot[2]},
	        map: map,
	        icon: image,
	        shape: shape,
	        title: spot[0],
	        zIndex: spot[4]
	      });
			}
    }
		populateMinDistanceField();
  };
	
	function populateMinDistanceField(){
		var distanceInFeet = calculateFeetFromMinDistance()
		var messageToUser;
		var buttonToCreateNewTimelapseHub;
		if(distanceInFeet < 2){
			messageToUser = "Thanks for taking a picture at the " + NEAREST_CAMERA_SPOT_NAME + "! Want to view the whole timelapse now?";
			buttonToCreateNewTimelapseHub = "<div></div>";
		} else {
			messageToUser = "You were only " + distanceInFeet + " feet away from the" + NEAREST_CAMERA_SPOT_NAME + " hub.  That seem correct? If not, you can create a new timelapse hub.";
			buttonToCreateNewTimelapseHub = "<div id='createNewHub' class='btn btn-primary btn-lg'>Create New Hub</div>";
		}
		$('#hubConfirmation').html(messageToUser);
		$('#formActions').append(buttonToCreateNewTimelapseHub);
		
		$('#createNewHub').on("click", function(e){
			e.preventDefault();
			$.ajax({
				url: "/timelapse_hubs/new",
				method: "GET",
				data: {
					timelapse_hub: {
						latitude: "123",
						longitude: "456"
					}
				},
				success: function(resp){
					document.open();
					document.write(resp);
					document.close();
				}
			});
		});
		
		$('#formSubmission').on("click", function(e){
			e.preventDefault();
			var photoId = $("#map").data("photo-id");
			$.ajax({
				url: "/photographs/" + photoId,
				type: "PATCH",
				data: {
					photograph:{
						timelapse_hub_id: SPOT_ID
					}
				},
				success: function(resp){
					$.ajax({
						url: "/timelapse_hubs/" + resp.photograph.timelapse_hub_id,
						type: "GET",
						success: function(resp){
							document.open();
							document.write(resp);
							document.close();
						},
						error: function(){
							console.log("unable to redirect to show the timelapse at the hub");
						},
					})
				},
				error: function(){
					console.log("unable to update photo with timelapse hub id");
				},
			})
		})
	};
	
	function calculateFeetFromMinDistance(){
		//1000 meters in a km
		var meters = MIN_DISTANCE * 1000;
		//3.28084 feet in a meter
		var feetAway = meters * 3.28084;
		
		feetAway = parseInt(feetAway * 100)/100
		return feetAway;
	};
	
	function findNearestCameraSpot(pictureSpots){
		var photoCoords = $('#map').data('photo-coordinates').split("***");
		var photoLat = parseFloat(photoCoords[0]);
		var photoLong = parseFloat(photoCoords[1]);
		var nameOfSpot = pictureSpots[0][0];
		
		var spotId = pictureSpots[0][3];
		
		var minDistance = distance(photoLat, photoLong, pictureSpots[0][1], pictureSpots[0][2]);
		
		for(var i = 1; i < pictureSpots.length; i++){
			var newDistance = distance(photoLat, photoLong, pictureSpots[i][1], pictureSpots[i][2]);
			if(newDistance < minDistance){
				minDistance = newDistance;
				nameOfSpot = pictureSpots[i][0];
				spotId = pictureSpots[i][3];
			}
		}
		
		return [nameOfSpot, minDistance, spotId];
	};
	
	function distance(lat1, lon1, lat2, lon2) {
		//returns distance between two lat longs IN KILOMETERS
		var radlat1 = Math.PI * lat1/180
		var radlat2 = Math.PI * lat2/180
		var theta = lon1-lon2
		var radtheta = Math.PI * theta/180
		var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
		dist = Math.acos(dist)
		dist = dist * 180/Math.PI
		dist = dist * 60 * 1.1515
		dist = dist * 1.609344
		return dist
	};
	
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDRb8dyf99yBGaxLMSQUggf0ql4wV8yGTE&callback=initMap"
    async defer></script>