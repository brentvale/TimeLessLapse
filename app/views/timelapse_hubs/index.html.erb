<!-- 
@hubs
@total_images_hash (#number of images per timelpase)  -->

<div class="col-xs-12" style="margin-bottom:50px">
	<h2 style="width:200px;display:inline-block">Your Hubs</h2>
	<label>Speed Display (miliseconds between images)<br>
		<input id='intervalTime' type='text' value="200">
	</label>
</div>

<div class="col-xs-12">
	<% @hubs.each do |hub| %>
	
		<div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
			<h4><%= hub.hub_name %></h4>
			<div class="timelapse-display" data-hub-id="<%= hub.id %>">
				<% hub_length = hub.photographs.length %>
				<% hub.photographs.each_with_index do |pic, idx| %>
		
						<% if idx == 0 %>
							<div class="timelapse-image active"  data-order-id="<%= idx %>">
								<p>Picture <%= idx + 1 %> of <%= hub_length %></p>
								<%= image_tag pic.image.url(:small), data: { order_id: idx} %>
							</div>
						<% else %>
							<div class="display-none timelapse-image" data-order-id="<%= idx %>">
								<p>Picture <%= idx + 1 %> of <%= hub_length %></p>
								<%= image_tag pic.image.url(:small), data: { order_id: idx} %>
							</div>
						<% end %>
				<% end %>
			</div>
		</div>
		
	<% end %>
</div>

<script>
	$(function(){
		var TIMELAPSE_IMAGES_HASH;
		//single integer value 0..n generated by iterating through hubs.each_with_index
		var CURRENT_TIMELAPSE_IMAGE_NUMBER;
		var TIMELAPSE_INTERVAL;
		var CURRENT_HUB_ID = -1;
		var PREVIOUS_HUB_ID = -1;
		
		function nextImage(){
			$(TIMELAPSE_IMAGES_HASH[CURRENT_TIMELAPSE_IMAGE_NUMBER]).addClass('display-none').removeClass('active');

			if(typeof TIMELAPSE_IMAGES_HASH[CURRENT_TIMELAPSE_IMAGE_NUMBER + 1] === "undefined"){
				CURRENT_TIMELAPSE_IMAGE_NUMBER = 0;
				$(TIMELAPSE_IMAGES_HASH[0]).removeClass('display-none').addClass('active');
				console.log("resetting to zero")
			} else {
				$(TIMELAPSE_IMAGES_HASH[CURRENT_TIMELAPSE_IMAGE_NUMBER + 1]).removeClass('display-none').addClass('active');
				CURRENT_TIMELAPSE_IMAGE_NUMBER = CURRENT_TIMELAPSE_IMAGE_NUMBER + 1;
			}
		};
		
		function startTimelapse(){
			var intervalTime = parseInt($('#intervalTime').val());
			//resume timelapse with current image if unhovering returns to same timelapse
			if(CURRENT_HUB_ID !== PREVIOUS_HUB_ID){
				CURRENT_TIMELAPSE_IMAGE_NUMBER = 0;
			}

			TIMELAPSE_INTERVAL = setInterval(function(){
				nextImage();
			}, intervalTime)
		};
		
		function convertImagesToHash(images, callback){
			var hash = {};
			for(var i = 0; i < images.length; i++){
				hash[$(images[i]).data("order-id")] = images[i];
			}
			callback();
			return hash;
		};
		
		$(".timelapse-display").hover(
			function(e){
			e.preventDefault();
			CURRENT_HUB_ID = $(e.currentTarget).data("hub-id");
			var images = $(e.currentTarget).find(".timelapse-image");
			TIMELAPSE_IMAGES_HASH = convertImagesToHash(images, startTimelapse);
		}, function(e){
			e.preventDefault();
			clearInterval(TIMELAPSE_INTERVAL);
			PREVIOUS_HUB_ID = CURRENT_HUB_ID;
			console.log('unhovering')
		});
	});
</script>